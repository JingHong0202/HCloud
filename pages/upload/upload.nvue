<template>
	<view class="upload" :render-whole='true'>
		<custom-breadCrumb :path="path" @click='toItem'></custom-breadCrumb>
		<uni-list :border="false" :scrollY="true">
			<uni-list-item v-if='isPath' clickable :title="'返回上一级'" @click="select({type: 25})"
				:thumb="selectThumb({type: 25})">
			</uni-list-item>
			<uni-list-item v-for=" (item,i) in list" :key='item' :title="item.fileName" :ellipsis="1" clickable
				:thumb="selectThumb(item)" @click="select(item)">
				<template slot='footer' v-if='item.type'>
					<view class="item-right">
						<radio class="radio" color="#e4c774" :class="item.checked ? 'checked' : ''"
							:checked="item.checked">
						</radio>
					</view>
				</template>
			</uni-list-item>
		</uni-list>
		<view class="upload-footer">
			<template v-if='!mode'>
				<view class="used-progress">
					<progress active :percent="avaiable_space_percent" stroke-width="10" backgroundColor="#999" />
					<view class="used-text">
						<text class="used-text-ctx">
							可用空间{{avaiable_space}}
						</text>
					</view>
				</view>
				<view class="upload-footer-btn">
					<view class="upload-footer-btn-left" @click="toUploadTarget">
						<text class="btn-left-label">上传至: </text>
						<text class="btn-left-target">{{target.title }}</text>
					</view>
					<view class="upload-footer-btn-right" :class="{'upload-footer-btn-right-active': selectlist.length}"
						@click="upload">
						<text class="submit">上传{{selectlist.length ? `(${selectlist.length})` : ''}}</text>
					</view>
				</view>
			</template>
			<template v-else>
				<button type="primary" class="dir-btn"  @click="confirm" >确定</button>
			</template>
		</view>
	</view>
</template>

<script>
	import {
		upload
	} from '@/api/file.js'
	import {
		selectIcon,
		getFileMimeType
	} from '@/util/file.js'

	import {
		mapState,
		mapMutations,
		mapActions
	} from 'vuex'
	import files from '@/util/files.js'
	import {
		formatBytes
	} from '@/util/file.js'
	export default {
		onNavigationBarButtonTap(e) {
			if (!e.index) {
				this.isClose = true
				uni.navigateBack({
					delta: 1
				})
			} else {
				this.selectAll()
			}
		},
		onLoad({
			mode
		}) {
			this.mode = mode
			if (this.mode) {
				uni.setNavigationBarTitle({
					title: '选择下载目录'
				})
			}
			files.getRootDir().then(res => {
				this.path = res.path
				this.list = res.list
			})
		},
		onShow() {
			uni.$off('select-all')
			uni.$off('cancel-all')
			uni.$on('select-all', () => {
				this.selectAll()
			})
			uni.$on('cancel-all', () => {
				this.cleanList()
			})
		},
		data() {
			const user = getApp().globalData.userinfo
			return {
				list: [],
				path: [],
				user,
				target: uni.getStorageSync(`${user.mobile}-upload-target`) || {
					title: '我的文件'
				},
			};
		},
		computed: {
			...mapState('file', ['action', 'selectlist']),
			isPath() {
				return this.path && this.path.length > 1
			},
			avaiable_space() {
				return formatBytes(this.user.total_space - this.user.used_space)
			},
			avaiable_space_percent() {
				return 100 * (this.user.used_space / this.user.total_space)
			}
		},
		destroyed() {
			if (this.mode && this.confirm_path) {
				uni.setStorageSync(`${getApp().globalData.userinfo.mobile}-down-target`,
					this.confirm_path || '/storage/emulated/0/HCloud_downloads')
				this.$store.commit('settings/CHANGE_DOWN_TARGET', this.confirm_path ||
					'/storage/emulated/0/HCloud_downloads')
			}
		},
		methods: {
			...mapMutations('file', ['CHANGE_SELECT_LIST']),
			...mapActions('file', ['ADD_UP_LIST']),
			confirm() {
				this.isClose = true
				this.confirm_path =  this.path[this.path.length - 1].path.toString()
				uni.navigateBack({
					delta: 1
				})
			},
			async toItem(item) {
				if (item.title === '根目录') {
					files.getRootDir().then(res => {
						this.path = res.path
						this.list = res.list
						this.$forceUpdate()
					})
				} else {
					files.getSubDir(item.path).then(res => {
						this.list = res.list
						this.path = this.path.slice(0, this.path.findIndex(item2 => item2.title === item
							.title) + 1)
						this.$forceUpdate()
					})
				}
			},
			async upload() {
				if (!this.selectlist.length) return
				await this.ADD_UP_LIST({
					target: this.target.uuid,
					selectlist: this.selectlist
				})
				this.cleanList()
				uni.redirectTo({
					url: '../status/status'
				})
			},
			toUploadTarget() {
				if (this.action) return
				uni.navigateTo({
					url: '/pages/folder-list/folder-list',
					success: () => {
						uni.$once('returnData', (res) => {
							this.target = res
							uni.setStorageSync(`${this.user.mobile}-upload-target`, res)
						})
					}
				})
			},
			cleanList() {
				this.list.forEach(item => {
					if (item.type !== 25 && item.type !== 0) this.$set(item, 'checked', false)
				})
				this.CHANGE_SELECT_LIST([])
			},
			selectAll() {
				let selectlist = []
				this.list.forEach((item) => {
					if (item.type !== 25 && item.type !== 0) {
						this.$set(item, 'checked', true)
						selectlist.push(item)
					}
				})
				this.CHANGE_SELECT_LIST(selectlist)
			},
			selectThumb(current) {
				// if (current.type === 1 || current.type === 3) return current.thumb;
				return selectIcon(current.type);
			},
			addSelectList(item) {
				if (this.selectlist.indexOf(item) >= 0) {
					this.$set(item, 'checked', false)
					let newArr = [...this.selectlist]
					newArr.splice(this.selectlist.findIndex(item2 => item2 === item), 1)
					this.CHANGE_SELECT_LIST(newArr)
				} else {
					this.$set(item, 'checked', true)
					this.CHANGE_SELECT_LIST([...this.selectlist, item])
				}
				this.$forceUpdate()
			},
			select(item) {
				switch (item.type) {
					case 0:
						if (this.action) return
						if (this.path[this.path.length - 1].path === item.path) return
						this.path.push({
							title: item.fileName,
							path: item.path
						})
						files.getSubDir(item.path).then(res => {
							this.list = res.list
						})
						break;
					case 25:
						if (this.action) return
						uni.navigateBack({
							delta: 1
						})
						break;
					default:
						return this.addSelectList(item)
				}
			},
		},
		onBackPress() {
			if (this.isClose) return
			if (this.action) {
				this.cleanList()
				return true
			}
			let index = this.path.length - 1
			if (index >= 1) {
				if (index > 1) {
					files.getSubDir(this.path[index - 1].path).then(res => {
						this.list = res.list
						this.path.splice(index, 1)
						this.$forceUpdate()
					})
				} else {
					files.getRootDir().then(res => {
						this.path = res.path
						this.list = res.list
						this.$forceUpdate()
					})
				}
				return true
			}

		}
	}
</script>

<style lang="scss" scoped>
	.upload {
		@extend %flex;
		flex-direction: column
	}
	// .dir-path {
	// 	font-size: $uni-font-size-base;
	// }
	.dir-btn {
		@extend %flex;
		font-size: $uni-font-size-lg;
		margin: 25rpx;
	}
	.item-right {
		/* #ifndef APP-NVUE  */
		height: 100%;
		@extend %f-ct;
		/* #endif  */

		/* #ifdef APP-NVUE */
		@extend %f-ct;
		/* #endif  */
	}

	.upload-footer {
		height: 140rpx;
		flex-direction: column;

		.used-progress {
			height: 50rpx;
		}

		.used-text {
			@extend %f-ct;
		}

		.used-text-ctx {
			font-size: 22rpx;
			text-align: left;
			margin-right: 30rpx;
			color: $uni-color-primary;
		}

		.upload-footer-btn {
			height: 70rpx;
			padding-left: 20rpx;
			padding-right: 20rpx;
		}

		.upload-footer-btn-left {
			@extend %f-ct;
			flex: 2;
			margin-right: 30rpx;

			.btn-left-label {
				font-size: $uni-font-size-base;
			}

			.btn-left-target {
				font-size: $uni-font-size-base;
				color: $uni-color-primary;
				lines: 1;
				width: 340rpx;
			}
		}

		.upload-footer-btn-right-active {
			background-color: $uni-color-primary !important;
		}

		.upload-footer-btn-right {
			border-radius: 30rpx;
			background-color: $btn-disabled-status;
			@extend %f-ct;
			@extend %flex;

			.submit {
				color: white;
				font-size: $uni-font-size-base;
			}
		}
	}
</style>
