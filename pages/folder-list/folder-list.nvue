<template>
	<view class="folder-list" :render-whole='true'>
		<custom-list :skeletonLoading='skeletonLoading' @breadClick='breadClick' :isShowFabTop='false'
			:openBreadCrumb="true" :closeLongPress='true' :closeClick="true" closeDownLoad
			closeUpLoad customEvent @click='open' :path='path' :openActionSheet="false" :list="list">
		</custom-list>
		<view class="folder-footer" elevation="10px">
			<view class="btnBox-left" @click="mkdir"><text class="left-text">新建文件夹</text></view>
			<view class="btnBox-right" @click="confirm" v-if="!only_mkdir"><text class="right-text">确定</text></view>
		</view>
	</view>
</template>

<script>
	import {
		selectIcon
	} from '@/util/file.js'
	import {
		getlist
	} from '@/api/file.js'
	export default {
		onLoad(args) {
			if (args.from === 'move') {
				uni.setNavigationBarTitle({
					title: "选择移动位置"
				})
			} else if (args.from === 'mkdir') {
				uni.setNavigationBarTitle({
					title: "选择路径"
				})
				this.only_mkdir = true
			}
			//request
			this.$nextTick(async () => {
				await this.getFolder()
				this.skeletonLoading = false
			})
		},
		onUnload() {
			uni.$off('returnData')
		},
		onNavigationBarButtonTap(e) {
			this.isClose = true
			uni.navigateBack()
		},
		methods: {
			async breadClick({
				uuid,
				title
			}) {
				await this.getFolder(uuid, null, 400, 1, 0)
				this.file_id = uuid
				this.path = this.path.slice(0, this.path.findIndex(item => item.uuid === uuid) + 1)
			},
			async getFolder(parent, page = null, num, cache, type) {
				const {
					data: {
						count,
						filelist
					}
				} = (await getlist(parent, page, num, cache, +type)).data
				this.list = filelist
			},
			async open(item) {
				let {
					uuid
				} = item
				await this.getFolder(uuid, null, 400, 1, 0)
				this.file_id = uuid
				this.path.push({
					title: item.fileName,
					uuid
				})
			},
			mkdir() {
				uni.$off('inputModal-success')
				uni.$once('inputModal-success', async () => {
					await this.getFolder(this.file_id, null, 400, 1, 0)
				})
				uni.navigateTo({
					url: "/pages/global/input-modal/input-modal?params=" + encodeURIComponent(JSON.stringify({
						title: '新建文件夹',
						placeholder: '请输入文件名',
						file_id: this.file_id
					}))
				})
			},
			confirm() {
				uni.$emit('returnData', {uuid:this.file_id, title: this.path[this.path.length - 1].title})
				this.isClose = true
				uni.navigateBack({
					delta: 1
				})
			}
		},
		 onBackPress() {
			 if (this.isClose) return
			if (this.path.length > 1) {
				 this.getFolder(this.path[Math.max(this.path.length - 2, 0)].uuid, null, 400, 1, 0).then(() => {
					 this.path.pop()
				 })
				return true
			}
			return
		},
		data() {
			return {
				list: [],
				path: [{
					title: "全部文件",
				}],
				// 强制返回
				isClose: false,
				file_id: null,
				skeletonLoading: true
			};
		}
	}
</script>

<style lang="scss">
	%common-btnBox {
		@extend %flex;
		@extend %f-ct;
	}

	.folder-list {
		@extend %flex;
		flex-direction: column;
	}

	.folder-footer {
		height: 100rpx;

		.left-text,
		.right-text {
			font-size: $uni-font-size-lg;
			color: white;
		}

		.btnBox-left {
			@extend %common-btnBox;
			background-color: white;
			&:active {
				background-color: $uni-bg-color-hover;
			}
			.left-text {
				color: $uni-color-primary;
			}

		}

		.btnBox-right {
			@extend %common-btnBox;
			background-color: $uni-color-primary;
			&:active {
				background-color: $uni-bg-color-hover2;
			}
		}
	}
</style>
