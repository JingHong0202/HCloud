<template>
	<view class="images" :render-whole='true'>
		<view style="flex-direction: column;" elevation="1px">
			<uni-status-bar />
			<uni-nav-bar :border='false' @clickLeft='toAccount' rightIcon="more-filled"
				@clickRight='openMenu = !openMenu'>
				<view slot="left">
					<image :src="info.avatars || '/static/images/avatar.png'" mode="aspectFit" class="user-avatars" />
				</view>
				<custom-swiperTab :index='tabIndex' @change='tabIndexChange' :labels='TabLables' />
			</uni-nav-bar>
		</view>
		<swiper :current="tabIndex" class="content-box" :skip-hidden-item-layout="true" @change='SwiperChange'>
			<swiper-item class="photo-swiper">
				<custom-floatPanel :list="photoList" @end='pDropEnd'>
					<custom-media ref='photo' :skeletonLoading="skeletonLoading_photo" @refresh='pRefresh'
						:downStatus="PhotoPageDownStatus" :status='PhotoPageStatus'
						@scrolltolower='PhotoPageScrollHandler' :list='photoList'>
					</custom-media>
				</custom-floatPanel>
			</swiper-item>
			<swiper-item class="video-swiper">
				<custom-floatPanel :list="videoList" @end='vDropEnd'>
					<custom-media ref='video' :skeletonLoading="skeletonLoading_video" @refresh='vRefresh'
						:downStatus="VideoPageDownStatus" mode='video' :status='VideoPageStatus'
						@scrolltolower='VideoPageScrollHandler' :list='videoList'>
					</custom-media>
				</custom-floatPanel>
			</swiper-item>
		</swiper>

		<custom-popups :afterTop='afterTop' :labels="labels" v-if='openMenu' @handleClick='handleClick'
			@exit='openMenu = !openMenu' />
		<custom-actionSheet @share='share' @download='addDownList' @rename='rename' @move='move' @del='del'></custom-actionSheet>
	</view>
</template>

<script>
	import {
		mapState,
		mapMutations,
		mapActions
	} from 'vuex'
	import popups from '@/common/js/mixins/popups.js'
	import actionsheet from '@/common/js/mixins/actionsheet.js'
	import nav from '@/common/js/mixins/nav.js'
	import {
		LIST_ITEM_NUM
	} from '@/common/js/consts.js'
	import {
		getmedia
	} from '@/api/file.js'
	export default {
		mixins: [popups, actionsheet, nav],
		onHide() {
			this.exitAction()
		},
		onNavigationBarSearchInputClicked() {
			uni.navigateTo({
				url: '/pages/search/search'
			})
		},
		computed: {
			...mapState('file', ['action', 'selectlist']),
			info() {
				return getApp().globalData.userinfo
			}
		},
		data() {
			return {
				TabLables: [
					'照片', '视频'
				],
				tabIndex: 0,
				PhotoPageStatus: 'more',
				PhotoPageDownStatus: 'more',
				skeletonLoading_photo: true,
				VideoPageStatus: 'more',
				VideoPageDownStatus: 'more',
				skeletonLoading_video: true,
				photoList: [],
				videoList: [],
				afterTop: 0,
				labels: [],
				video_p: 0,
				photo_p: 0
			}
		},
		onShow() {
			uni.$off('select-all')
			uni.$off('cancel-all')
			uni.$on('select-all', () => {
				if (this.action) this.selectAll()
			})
			uni.$on('cancel-all', () => {
				if (this.action) this.exitAction()
			})
		},
		async onReady() {
			// request 
			uni.showLoading({
				mask: true,
				title: '加载中...'
			})
			await this.init(1, 1)
			this.$nextTick(function() {
				let {
					statusBarHeight
				} = uni.getSystemInfoSync()
				this.afterTop = statusBarHeight + 50
				this.skeletonLoading_photo = false
				this.PhotoPageScrollHandler()
				uni.hideLoading()
			})
		},
		methods: {
			...mapMutations('file', ['CHANGE_SELECT_LIST', 'TOGGLE_ACTION']),
			...mapActions('file', ['ADD_DOWN_LIST']),
			// PScroll(x,y,w,h) {
			// 	this.$refs['Pfloat'].scroll(y,h)
			// },
			async init(cache, t) {
				const {
					data: {
						filelist,
						count
					}
				} = (await getmedia(0, LIST_ITEM_NUM, cache, t)).data,
				mode = t === 1 ? 'photo' : 'video'
				this[`count_${mode}`] = count
				this[`${mode}List`] = this.format(filelist)
				this['page_max_' + mode] = Math.floor(count / LIST_ITEM_NUM)
			},
			async load(t) {
				const mode = `${t === 1 ? 'photo' : 'video'}`,
					{
						data: {
							filelist
						}
					} = (await getmedia(this[mode + '_p'], LIST_ITEM_NUM, 1, t)).data
				if (!filelist.length) return this[mode + "_p"] -= 1
				this[mode + 'List'] = this.format(this[mode + 'List'].concent(filelist))
			},
			format(list) {
				const keys = [...new Set(list.map(item => item.date))]
				return keys.map(item => {
					return {
						date: item,
						list: list.filter(item2 => item2.date === item)
					}
				})
			},
			tabIndexChange(index) {
				if (this.action) this.exitAction()
				this.tabIndex = index
			},
			async refresh_list() {
				if (!this.tabIndex) return await this.pRefresh()
				else return await this.vRefresh()
			},
			async pRefresh() {
				this.PhotoPageDownStatus = 'loading'
				if (this.action) this.exitAction()
				this.photo_p = 0
				this.count_photo = 0
				await this.init(1, 1)
				setTimeout(() => {
					this.PhotoPageDownStatus = "more"
				}, 1000)
				if (this.count_photo) setTimeout(() => {
					this.PhotoPageScrollHandler()
				}, 1000)
			},
			async vRefresh() {
				this.VideoPageDownStatus = 'loading'
				// request 完成后显示刷新成功并初始化避免出错，隔段时间关闭下拉框
				if (this.action) this.exitAction()
				this.video_p = 0
				this.count_video = 0
				await this.init(1, 3)
				setTimeout(() => {
					this.VideoPageDownStatus = "more"
				}, 1000)
				if (this.count_video) setTimeout(() => {
					this.VideoPageScrollHandler()
				}, 1000)
			},
			pDropEnd(index) {
				return this.$refs['photo'].toItem(index)
			},
			vDropEnd(index) {
				return this.$refs['video'].toItem(index)
			},
			async VideoPageScrollHandler() {
				this.VideoPageStatus = 'loading'
				this.video_p += 1
				await this.load(3)
				if (this.video_p >= this['page_max_video']) return setTimeout(() => {
					this.VideoPageStatus = 'noMore'
				}, 500)
				else setTimeout(() => {
					this.VideoPageStatus = 'more'
				}, 500)
			},
			async PhotoPageScrollHandler() {
				this.PhotoPageStatus = 'loading'
				this.photo_p += 1
				await this.load(1)
				if (this.photo_p >= this['page_max_photo']) return setTimeout(() => {
					this.PhotoPageStatus = 'noMore'
				}, 500)
				else setTimeout(() => {
					this.PhotoPageStatus = 'more'
				}, 500)
			},
			SwiperChange({
				detail: {
					current
				}
			}) {
				if (this.action) this.exitAction()
				return this.switchTabItem(current)
			},
			switchTabItem(index) {
				this.tabIndex = index
				this.$nextTick(function() {
					switch (index) {
						case 1:
							if (this.videoList.length) return
							uni.showLoading({
								mask: true,
								title: '加载中...'
							})
							// request 
							this.init(1, 3).then(() => {
								uni.hideLoading()
								this.skeletonLoading_video = false
								if (this.videoList.length) this.VideoPageScrollHandler()
							})
							break;
					}
				})
			},
			cleanPhotoList() {
				this.photoList.forEach((item) => {
					this.$set(item, 'selectBlock', false)
					item.list.forEach(item2 => {
						this.$set(item2, 'checked', false)
					})
				})
			},
			cleanVideoList() {
				this.videoList.forEach((item) => {
					this.$set(item, 'selectBlock', false)
					item.list.forEach(item2 => {
						this.$set(item2, 'checked', false)
					})
				})
			},
			exitAction() {
				switch (this.tabIndex) {
					case 0:
						this.cleanPhotoList()
						break;
					default:
						this.cleanVideoList()
				}
				this.CHANGE_SELECT_LIST([])
				this.$forceUpdate()
			},
			selectAll() {
				switch (this.tabIndex) {
					case 0:
						let selectPhoto = []
						this.photoList.forEach((item) => {
							item.list && item.list.forEach((item2) => {
								this.$set(item2, 'checked', true)
								selectPhoto.push(item2)
							})
						})
						this.CHANGE_SELECT_LIST(selectPhoto)
						break;
					default:
						let selectVideo = []
						this.videoList.forEach((item) => {
							item.list && item.list.forEach((item2) => {
								this.$set(item2, 'checked', true)
								selectVideo.push(item2)
							})
						})
						this.CHANGE_SELECT_LIST(selectVideo)
				}
				this.$forceUpdate()
			}
		},
		onBackPress() {
			if (getApp().globalData.modal) {
				uni.$hide()
				return true
			}
			// 返回时，如果在选择模式时则退出，解决相册视频页面返回键失效，当有路径时则返回上一层
			if (this.action) {
				this.exitAction()
				return true
			}
		}
	}
</script>

<style lang="scss" scoped>
	.images {
		@extend %flex;
		flex-direction: column;
	}

	.photo-swiper,
	.category-swiper,
	.video-swiper {
		flex-direction: column;
		@extend %flex;
	}

	.content-box {
		@extend %flex;
	}
</style>
