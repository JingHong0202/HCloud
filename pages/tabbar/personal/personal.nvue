<template>
	<view class="personal" :render-whole='true'>
		<view class="user-box" :style="{height: `${400+navHeight}rpx`}">
		</view>
		<list ref='personal' class="list" :style="{'margin-top': navHeight}" show-scrollbar="false">
			<cell :style="{height: `${300}rpx`}">
			</cell>
			<cell class="vip-banner" ref='vip'>
				<view class="vip-desc" elevation="5px">
					<view class="vip-desc-box">
						<image class="vip-icon" src="/static/images/vip-1.png" mode="widthFix"></image>
						<text class="vip-text">VIP会员</text>
					</view>
				</view>
			</cell>
			<uni-list-item :border='false' link to="/pages/share-list/share-list" title="分享"
				thumb="/static/icon/page/personal/share-line.png" thumbSize="sm"></uni-list-item>
			<uni-list-item :border='false' link to="/pages/recycle/recycle" title="回收站"
				thumb="/static/icon/page/personal/recycle.png" thumbSize="sm"></uni-list-item>
			<uni-list-item :border='false' to="/pages/setting/setting" link title="设置"
				thumb="/static/icon/page/personal/shezhi.png" thumbSize="sm"></uni-list-item>
			<uni-list-item :border='false' to="/pages/about/about" link title="关于"
				thumb="/static/icon/page/personal/info.png" thumbSize="sm"></uni-list-item>
			<uni-list-item :border='false' link title="退出登录" thumb="/static/icon/page/personal/user-exit.png"
				thumbSize="sm" @click="logout"></uni-list-item>
			<cell :style="{height: placeholder}">
			</cell>
		</list>
		<view class="nav" :style="{height: navHeight}" ref='nav' />
		<view class="user-box2" :style="{height: `${400+navHeight}rpx`}">
			<image elevation="5px" class="avatars" ref='circle' src="/static/images/avatar.png" mode="aspectFit"
				@click="toPage('account')"></image>
			<view class="info" ref='user'>
				<text class="name">{{user.mobile}}</text>
				<!-- <progress class="percent" active border-radius='15' stroke-width="5" :percent="33"
					activeColor="#4070ff" /> -->
				<view class="percent">
					<custom-progress   :PropPercent='percent'  />
				</view>
				<text class="used">空间情况: {{space_info}}</text>
			</view>
			<image class="qs" ref='qs' src="/static/icon/common/check.png" mode="aspectFit" @click="scanCode"></image>
		</view>
	</view>
</template>
<script>
	import {
		formatBytes
	} from '@/util/file.js'
	import {
		get_user_detail
	} from '@/api/user.js'
	import {
		getEl
	} from '@/util/bindingx.js'
	import userCommon from '@/common/js/mixins/user.js'
	uni.showLoading({
		mask: true,
		title: '初始化中...'
	})
	const bindingx = uni.requireNativePlugin('bindingx'),
		dom = uni.requireNativePlugin('dom')
	export default {
		mixins: [userCommon],
		data() {
			return {
				navHeight: 0,
				user: getApp().globalData.userinfo,
				placeholder: 0
			}
		},
		computed: {
			totalSize() {
				return this.user.total_space ? formatBytes(this.user.total_space) : '0.00GB'
			},
			usedSize() {
				return this.user.used_space ? formatBytes(this.user.used_space) : '0.00GB'
			},
			33() {
				return 100 * (this.user.used_space / this.user.total_space)
			},
			space_info() {
				return `${this.totalSize} / ${this.usedSize}`
			}
		},
		mounted() {
			let {
				statusBarHeight
			} = uni.getSystemInfoSync()
			this.navHeight = statusBarHeight + 44
			this.init(statusBarHeight)
		},
		methods: {
			init(statusBarHeight) {
				setTimeout(() => {
					this.$nextTick(() => {
						dom.getComponentRect(this.$refs['vip'], ({
							size
						}) => {
							this.placeholder = size.top + 'px'
						})
						dom.getComponentRect(this.$refs['circle'], (({
							size
						}) => {
							let circleY_targetY = uni.upx2px(size.top + (this.navHeight -
									statusBarHeight) + (((this.navHeight -
									statusBarHeight) - (uni.upx2px(100) * .6)) / 2)),
								qs_targetY = uni.upx2px(size.top + (this.navHeight -
									statusBarHeight) + (((this.navHeight -
									statusBarHeight) - (uni.upx2px(60) * .9)) / 2)),
								list_header_height = uni.upx2px(300)
							const userOpacity =
								`max(1-min(y,${uni.upx2px(100)})/${uni.upx2px(100)},0)`,
								navOpacity =
								`min(y,${uni.upx2px(list_header_height+this.navHeight)})/${uni.upx2px(list_header_height+this.navHeight)}`,
								userY = `y>${uni.upx2px(100)}?-500:0`,
								circleY =
								`(0-min(y,${list_header_height})/${list_header_height})*${circleY_targetY}`,
								circleX =
								`(0-min(y,${list_header_height})/${list_header_height})*${uni.upx2px(100)}`,
								circleScale =
								`(y-${this.navHeight})<=0?1:(1-min(.4,1*(y-${this.navHeight})/${list_header_height}))`,
								qsY =
								`(0-min(y,${list_header_height})/${list_header_height})*${qs_targetY}`,
								qsX =
								`min(y,${list_header_height})/${list_header_height}*${uni.upx2px(90)}`,
								qsScale =
								`(y-${this.navHeight})<=0?1:(1-min(.1,1*(y-${this.navHeight})/${list_header_height}))`
							bindingx.bind({
								eventType: 'scroll',
								anchor: getEl(this.$refs['personal']),
								config: {
									transformOrigin: 'center'
								},
								props: [{
									element: getEl(this.$refs['nav']),
									property: 'opacity',
									expression: navOpacity,
								}, {
									element: getEl(this.$refs['user']),
									property: 'opacity',
									expression: userOpacity,
								}, {
									element: getEl(this.$refs['user']),
									property: 'transform.translateY',
									expression: userY,
								}, {
									element: getEl(this.$refs['qs']),
									property: 'transform.translateY',
									expression: qsY
								}, {
									element: getEl(this.$refs['qs']),
									property: 'transform.scale',
									expression: qsScale
								}, {
									element: getEl(this.$refs['qs']),
									property: 'transform.translateX',
									expression: qsX
								}, {
									element: getEl(this.$refs['circle']),
									property: 'transform.translateY',
									expression: circleY
								}, {
									element: getEl(this.$refs['circle']),
									property: 'transform.translateX',
									expression: circleX
								}, {
									element: getEl(this.$refs['circle']),
									property: 'transform.scale',
									expression: circleScale
								}]
							})
							uni.hideLoading()
						}))
					})
				}, 500)
			},
			formatBytes,
			toPage(pageName) {
				uni.navigateTo({
					url: `/pages/${pageName}/${pageName}`
				})
			},
			scanCode() {
				uni.scanCode({
					success: (res) => {
						let {
							link,
							desc
						} = JSON.parse(res.result)
						let split = link.split('/'),
							parse = split[split.length - 1]
						uni.navigateTo({
							url: '/pages/open-list/open-list?type=share&shareUrl=' + parse,
						})
					}
				})
			},
			exit() {
				uni.$showModal({
					concent: '确定要退出登录吗?',
					align: 'center'
				}).then(res => {
					// request
				}).catch((res) => {
					this.$hide()
				})
			}
		},
		onShow() {
			get_user_detail().then(({
				data: {
					data
				}
			}) => {
				uni.setStorageSync('userinfo', data)
				getApp().globalData.userinfo = data
				this.user = data
			}).catch(err => {
				console.log(err)
				this.toLogin()
			})
		},
		onBackPress() {
			if (getApp().globalData.modal) {
				uni.$hide()
				return true
			}
		}
	}
</script>
<style scoped lang='scss'>
	.list {
		flex: 1;
		flex-direction: column;
	}

	.nav {
		background-color: white;
		@include position(absolute, 0, 0, false, 0);
		opacity: 0;
	}

	.personal {
		flex-direction: column;
		flex: 1;
	}

	.vip-banner {
		height: 350rpx;
		background-color: white;

		.vip-desc {
			flex: 1;
			background-color: $app-color-theme-main;
			border-radius: 25rpx;
			margin: 70rpx;
			@extend %f-ct;
			flex-direction: column;

			& .vip-desc-box {
				flex-direction: column;
				justify-content: center;
				align-items: center;

				& .vip-icon {
					height: 80rpx;
					width: 80rpx;
					transform: scale(1.5);
				}

				& .vip-text {
					color: white;
					font-weight: bold;
					margin-top: 40rpx;
				}
			}
		}
	}

	.user-box {
		height: 400rpx;
		flex-direction: row;
		padding: 0 100rpx;
		@include position(absolute, 0, 0, false, 0);
		@extend %f-ct;
		background-color: $app-color-theme-vice;
	}

	.user-box2 {
		height: 400rpx;
		flex-direction: row;
		padding: 0 100rpx;
		@include position(absolute, 0, 0, false, 0);
		@extend %f-ct;

		.avatars {
			border-radius: 60rpx;
			margin-right: 30rpx;
			width: 100rpx;
			height: 100rpx;
		}

		.qs {
			width: 45rpx;
			height: 45rpx;
			margin-left: 15px;

			&:active {
				opacity: .3;
			}
		}

		.info {
			flex-direction: column;
			@extend %flex;

			.name {
				font-size: 30rpx;
			}

			.used {
				font-size: 21rpx;
				color: #333;
				margin-top: 20rpx;
			}

			.percent {
				width: 300rpx;
			}
		}
	}
</style>
