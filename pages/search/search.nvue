<template>
	<view class="search" :render-whole='true'>
		<picker @change="bindPickerChange" :value="index" :range="array" range-key="name">
			<view class="filter">
				<text class="filter-text">搜索{{array[array.findIndex(item => item.value === index)].name}}</text><text class="filter-text-alpha"
					style="transform: scale(.3);">▼</text>
			</view>
		</picker>
		<custom-list @refreshList='refresh' ref='list' v-if='list.length' multiple closeSkeleton :filter="filter" :list="list"
			@clean='cleanList' @loadmore='scrolltolower' isPageScroll @refresh='refresh' :downStatus='downStatus'
			:status='status'></custom-list>
		<!-- <custom-null v-else></custom-null> -->
		<custom-popups :labels="labels" v-if='openMenu' @handleClick='handleClick' @exit='openMenu = !openMenu' />
	</view>
</template>

<script>
	import popups from '@/common/js/mixins/popups.js'
	import customList from '@/common/js/mixins/custom-list.js'
	import {
		search as search_request
	} from '@/api/file.js'
	export default {
		mixins: [customList, popups],
		onNavigationBarSearchInputConfirmed() {
			return this.search()

		},
		onNavigationBarButtonTap(e) {
			if (!e.index) {
				this.openMenu = !this.openMenu
			} else if (e.index === 1) {
				this.search()
			}
		},
		onNavigationBarSearchInputChanged(e) {
			if (this.timer) clearTimeout(this.timer)
			this.timer = setTimeout(() => this.query = e.text, 50)
		},
		data() {
			return {
				query: '',
				array: [{
					name: '全部',
					value: 'all'
				}, {
					name: '图片',
					value: 1
				}, {
					name: '视频',
					value: 3
				}],
				index: 'all'
			}
		},
		methods: {
			bindPickerChange: function(e) {
				// 发生改变重新请求
				this.index = this.array[e.detail.value].value
			},
			async refresh() {
				this.downStatus = 'loading'
				if (this.$refs['list'].action) this.$refs['list'].exitAction()
				this.page = 0
				this.count = 0
				await this.search(0)
				this.setDownStatus('more')
			},
			async load() {
				const {
					data: {
						filelist
					}
				} = (await search_request(this.query, this.page,this.num,1,this.index)).data
				if (!filelist.length) return this.page -= 1
				this.list = this.list.concat(filelist)
			},
			async search(cache = 1) {
				if (!this.query) return uni.showToast({
					title: "请输入要搜索的文件名",
					icon: "none",
					position: "bottom"
				})
				const {
					data: {
						filelist,
						count
					}
				} = (await search_request(this.query, this.page, this.num, cache,this.index)).data
				this.count = count
				this.list = filelist
				this.page_max = Math.floor(count / this.num)
				await this.scrolltolower()
			}
		}
	}
</script>

<style lang='scss' scoped>
	.search {
		@extend %flex;
		flex-direction: column;
	}

	.filter {
		@extend %flex;
		height: 60rpx;
		padding: 0 20px;
		justify-content: center;
		align-items: center;
	}

	.filter-text {
		font-size: $uni-font-size-sm;
		line-height: 60rpx;
		color: $uni-text-color-placeholder;
	}

	.filter-text-alpha {
		color: $uni-text-color-placeholder;
	}
</style>
