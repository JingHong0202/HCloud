<template>
	<view class="recycle" :render-whole='true'>
		<custom-list isPageScroll :skeletonLoading="skeletonLoading" closeClick closeLongPress customEvent
			:actionSheetLabels='actionSheetLabels' :filter="filter" ref='list' @refresh='refresh'
			:downStatus='downStatus' :status='status' @loadmore='scrolltolower' :list="list" @clean='cleanList'
			@all='selectAll' @click='handlerClick' @refreshList='refresh' @longpress='handlerLong'></custom-list>
		<custom-popups :labels="labels" v-if='openMenu' @handleClick='handleClick' @exit='openMenu = !openMenu' />
	</view>
</template>

<script>
	import customList from '@/common/js/mixins/custom-list.js'
	import popups from '@/common/js/mixins/popups.js'
	import {
		del,
	} from '@/api/file.js'
	import {
		mapState
	} from 'vuex'
	import {
		getrecycle
	} from '@/api/file.js'
	export default {
		mixins: [customList, popups],
		data() {
			return {
				actionSheetLabels: [{
						text: '恢复',
						method: 'restore',
						icon: '/static/icon/actionsheet/restore.png'
					},
					{
						text: '删除',
						method: 'recycleDel',
						icon: '/static/icon/actionsheet/del.png'
					}
				]
			};
		},
		methods: {
			handlerClick(item) {
				return this.$refs['list'].addSelectList(item)
			},
			handlerLong(item) {
				return this.$refs['list'].addSelectList(item)
			},
			async init(isCache = 1) {
				const {
					data: {
						filelist,
						count
					}
				} = (await getrecycle(this.page, this.num, isCache)).data
				this.list = filelist
				this.count = count
				this.page_max = Math.floor(count / this.num)
				if (count) setTimeout(() => {
					this.scrolltolower()
				}, 500)
			},
			async load() {
				const {
					data: {
						filelist
					}
				} = (await getrecycle(this.page, this.num, 1)).data
				if (!filelist.length) return this.page -= 1
				this.list = this.list.concat(filelist)
			}
		},
		onNavigationBarButtonTap(e) {
			if (!e.index) {
				this.openMenu = !this.openMenu
			} else {
				uni.$showModal({
					concent: '确定要清空回收站吗?',
					align: 'center'
				}).then(async res => {
					await del({all: 1, mode: true})
					this.refresh()
					uni.showToast({
						title: '清空完成',
						position: 'bottom'
					})
				}).catch((res) => {
					this.$hide()
				})
			}
		},
		// computed: {
		// 	...mapState('file', ['selectlist'])
		// },
		async onReady() {
			await this.init()
			return this.skeletonLoading = false
		}
	}
</script>

<style lang="scss" scoped>
	.recycle {
		@extend %flex;
	}
</style>
